package com.walleto.dao.service;


import com.walleto.model.entity.User;
import com.walleto.repository.AccountDetailsRepo;
import com.walleto.repository.TransactionRepo;
import com.walleto.repository.UserRepo;
import com.walleto.service.WalletOperations;
import com.walleto.repository.CashbackEarnedRepo;
import com.walleto.model.entity.AccountDetails;
import com.walleto.model.entity.CashbackEarned;
import com.walleto.model.entity.Transaction;
import com.walleto.model.controller.BalanceResponse;
import com.walleto.model.controller.DepositRequest;
import com.walleto.model.controller.DepositResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
 class WalletOperationsTest {

    @Mock
    private AccountDetailsRepo accountDetailsRepo;
    @Mock
    private CashbackEarnedRepo cashbackEarnedRepo;

    private AccountDetails accountDetails;
    @Mock
    private UserRepo userRepo;

    @Mock
    private TransactionRepo transactionRepo;
    @Autowired
    private WalletOperations walletOperations;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
//        this.walletOperations = new WalletOperations(this.accountDetailsRepo, this.accountDetails, this.transactionRepo, this.cashbackEarnedRepo, 0);
    }

    @Test
    public void deposit() {
        int accountNo = 123456;
        int amount = 500;
        DepositRequest depositRequest = new DepositRequest(accountNo, amount);
        User user = new User(1, "saurabh@gmail.com", "Saurabh Madhure", "12345" );
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setAccNumber(accountNo);
        accountDetails.setBalance(0);
        accountDetails.setDetails(user);
        List<Transaction> allTransactions = new ArrayList<>();
        accountDetails.setTransactions(allTransactions);

        AccountDetails account = new AccountDetails(123456, 0, user, new ArrayList<Transaction>());

        doReturn(Optional.of(account)).when(accountDetailsRepo).findById(123456);

        doAnswer(invocation -> {
            Transaction transaction = invocation.getArgument(0);
            transaction.setId(String.valueOf(1L)); // Setting up the transaction ID since it will be autogenerated in function
            return transaction;
        }).when(transactionRepo).save(Mockito.any(Transaction.class));

        DepositResponse response = walletOperations.deposit(depositRequest);

        assertEquals(500, account.getBalance());
        assertEquals(1, account.getTransactions().size());
        assertNotNull(account.getTransactions().get(0).getId());
        assertEquals("SUCCESS", account.getTransactions().get(0).getStatus());
        assertEquals("500 DEPOSITED", account.getTransactions().get(0).getMessage());
        assertEquals(500, account.getTransactions().get(0).getDeposited());
        assertEquals(accountNo, account.getTransactions().get(0).getSenderId());
        assertEquals(0, account.getTransactions().get(0).getReceiverId());
        assertEquals(500, response.getDeposited_Amount());
    }


    @Test
    public void testShowInfo() {
        User user = new User(1, "saurabh@gmail.com", "Saurabh Madhure", "12345" );
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setAccNumber(123456);
        accountDetails.setBalance(5000);
        accountDetails.setDetails(user);
        List<Transaction> allTransactions = new ArrayList<>();
        accountDetails.setTransactions(allTransactions);

        when(accountDetailsRepo.findById(123456)).thenReturn(Optional.of(accountDetails));

        AccountDetails actualAccountDetails = walletOperations.showInfo(123456);

        assertEquals(accountDetails, actualAccountDetails);
    }


    @Test
    public void testBal() {
        // arrange
        int acc = 123;
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setBalance(1000);
        when(accountDetailsRepo.findById(acc)).thenReturn(Optional.of(accountDetails));

        // act
        BalanceResponse balanceResponse = walletOperations.bal(acc);

        // assert
        assertEquals(balanceResponse.getAvailableBalance(), 1000);
        verify(accountDetailsRepo, times(1)).findById(acc);
    }

//    @Test
//    public void testShowBalanceWithInvalidAccount() {
//        int accNumber = 5678;
//        BalanceResponse balanceResponse = walletOperations.showbalance(accNumber);
//        assertNull(balanceResponse);
//    }


    @Test
    public void testUserTransaction() {

        User user = new User(1, "saurabh@gmail.com", "Saurabh Madhure", "12345" );
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setAccNumber(123456);
        accountDetails.setBalance(5000);
        accountDetails.setDetails(user);
        List<Transaction> transactions = new ArrayList<>();
        Transaction mockTransaction = new Transaction(500, 0, 1, 1456, new Date(), "Transaction message", "Success","50", 4500);
        transactions.add(mockTransaction);
        accountDetails.setTransactions(transactions);

        when(accountDetailsRepo.findById(1)).thenReturn(Optional.of(accountDetails));

        List<Transaction> result = walletOperations.userTransaction(1);

        assertEquals(transactions, result);


    }
    @Test
    public void testTotalCashbackEarned() throws JsonProcessingException {
        int accountNumber = 1234;
        int cashback = 50;
        CashbackEarned earnedCashback = new CashbackEarned(accountNumber, cashback);
        when(cashbackEarnedRepo.findById(accountNumber)).thenReturn(Optional.of(earnedCashback));
        ResponseEntity<?> response = walletOperations.totalCashbackEarned(accountNumber);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(cashback, response.getBody());
    }

}



